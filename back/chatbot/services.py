import time
import logging
import uuid
from typing import Tuple, Optional, Dict, Any
from django.conf import settings
from django.db.models import Q
from textblob import TextBlob
from langdetect import detect, DetectorFactory
from sentence_transformers import SentenceTransformer
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

from .models import KnowledgeBase, Conversation, Message, ChatbotSettings

# Configuration pour des r√©sultats reproductibles
DetectorFactory.seed = 0

logger = logging.getLogger(__name__)


class EmotionDetector:
    """
    D√©tecteur d'√©motions bas√© sur TextBlob et r√®gles personnalis√©es
    """
    
    EMOTION_KEYWORDS = {
        'joy': ['heureux', 'content', 'joyeux', 'super', 'g√©nial', 'parfait', 'excellent', 'merci'],
        'sad': ['triste', 'd√©prim√©', 'malheureux', 'd√©√ßu', 'peine', 'chagrin'],
        'angry': ['√©nerv√©', 'furieux', 'col√®re', 'agac√©', 'irrit√©', 'rage', 'damn', 'merde'],
        'fear': ['peur', 'inquiet', 'anxieux', 'stress', 'angoisse', 'crainte'],
        'surprise': ['surpris', '√©tonnant', 'incroyable', 'wow', 'oh', 'vraiment'],
    }
    
    @staticmethod
    def detect_emotion(text: str) -> Tuple[str, float]:
        """
        D√©tecte l'√©motion dans un texte
        
        Returns:
            Tuple[str, float]: (√©motion, confiance)
        """
        text_lower = text.lower()
        
        # Analyse de polarit√© avec TextBlob
        blob = TextBlob(text)
        polarity = blob.sentiment.polarity
        
        # D√©tection par mots-cl√©s
        emotion_scores = {}
        for emotion, keywords in EmotionDetector.EMOTION_KEYWORDS.items():
            score = sum(1 for keyword in keywords if keyword in text_lower)
            if score > 0:
                emotion_scores[emotion] = score
        
        # Si des √©motions sp√©cifiques sont d√©tect√©es
        if emotion_scores:
            best_emotion = max(emotion_scores, key=emotion_scores.get)
            confidence = min(emotion_scores[best_emotion] * 0.3, 1.0)
            return best_emotion, confidence
        
        # Sinon, utilise la polarit√©
        if polarity > 0.3:
            return 'positive', abs(polarity)
        elif polarity < -0.3:
            return 'negative', abs(polarity)
        else:
            return 'neutral', 0.5


class KnowledgeBaseMatcher:
    """
    Syst√®me de correspondance avec la base de connaissances
    """
    
    def __init__(self):
        # D√©sactiver temporairement le mod√®le de similarit√© s√©mantique
        # √† cause des probl√®mes SSL
        self.model = None
        logger.info("Mod√®le de similarit√© s√©mantique d√©sactiv√© temporairement")
    
    def find_best_match(self, user_message: str) -> Tuple[Optional[KnowledgeBase], float]:
        """
        Trouve la meilleure correspondance dans la base de connaissances
        ALGORITHME AM√âLIOR√â ET PLUS PERMISSIF
        
        Args:
            user_message: Message de l'utilisateur
            
        Returns:
            Tuple[KnowledgeBase, float]: (meilleure correspondance, score de confiance)
        """
        knowledge_entries = KnowledgeBase.objects.filter(is_active=True)
        
        if not knowledge_entries.exists():
            return None, 0.0
        
        best_match = None
        best_score = 0.0
        
        user_message_lower = user_message.lower().strip()
        user_words = set(user_message_lower.split())
        
        logger.info(f"üîç Recherche pour: '{user_message}' -> mots: {user_words}")
        
        for entry in knowledge_entries:
            score = 0.0
            details = []
            
            # 1. CORRESPONDANCE EXACTE - Score tr√®s √©lev√©
            if user_message_lower == entry.question.lower():
                score = 1.0
                details.append("MATCH EXACT")
            
            # 2. CORRESPONDANCE DANS LA QUESTION - Plus permissif
            question_words = set(entry.question.lower().split())
            question_matches = user_words.intersection(question_words)
            if question_matches and len(question_words) > 0:
                question_score = len(question_matches) / max(len(user_words), len(question_words))
                score += question_score * 0.6  # Poids plus √©lev√©
                details.append(f"Question: {len(question_matches)}/{len(question_words)} = {question_score:.2f}")
            
            # 3. CORRESPONDANCE MOTS-CL√âS - Plus intelligente
            if entry.keywords:
                keywords = [k.strip().lower() for k in entry.keywords.split(',') if k.strip()]
                keyword_matches = 0
                total_keywords = len(keywords)
                
                for keyword in keywords:
                    # Correspondance exacte du mot-cl√©
                    if keyword in user_message_lower:
                        keyword_matches += 1
                    # Correspondance partielle pour les mots compos√©s
                    elif any(word in keyword or keyword in word for word in user_words if len(word) > 2):
                        keyword_matches += 0.5
                
                if total_keywords > 0:
                    keyword_score = keyword_matches / total_keywords
                    score += keyword_score * 0.5  # Poids √©lev√© pour les mots-cl√©s
                    details.append(f"Mots-cl√©s: {keyword_matches}/{total_keywords} = {keyword_score:.2f}")
            
            # 4. CORRESPONDANCE PARTIELLE DANS LA QUESTION - Nouveau
            if user_message_lower in entry.question.lower() or entry.question.lower() in user_message_lower:
                score += 0.3
                details.append("Correspondance partielle")
            
            # 5. BONUS POUR LES SALUTATIONS
            salutations = ['bonjour', 'salut', 'hello', 'hey', 'coucou', 'bonsoir']
            if any(sal in user_message_lower for sal in salutations) and any(sal in entry.keywords.lower() for sal in salutations if entry.keywords):
                score += 0.4
                details.append("Bonus salutation")
            
            # 6. BONUS POUR LES QUESTIONS COURTES
            if len(user_words) <= 3 and score > 0:
                score += 0.2
                details.append("Bonus question courte")
            
            # Nouveau seuil beaucoup plus bas et dynamique
            dynamic_threshold = max(0.2, entry.confidence_threshold * 0.3)  # R√©duction drastique
            
            logger.info(f"{'‚úÖ' if score >= dynamic_threshold else '‚ùå'} [{score:.3f} >= {dynamic_threshold:.3f}] {entry.question[:50]}... | {', '.join(details)}")
            
            if score >= dynamic_threshold and score > best_score:
                best_match = entry
                best_score = score
        
        if best_match:
            logger.info(f"üéØ MEILLEURE CORRESPONDANCE: '{best_match.question}' avec score {best_score:.3f}")
        else:
            logger.info("‚ùå Aucune correspondance trouv√©e")
        
        return best_match, best_score


class AIResponseGenerator:
    """
    G√©n√©rateur de r√©ponses IA en fallback
    """
    
    def __init__(self):
        self.fallback_responses = [
            "Hmm, c'est une question int√©ressante ! ü§î Je n'ai pas toutes les informations sous la main pour vous r√©pondre pr√©cis√©ment. Pouvez-vous me donner un peu plus de contexte ?",
            "Ah, je vois ce que vous voulez dire ! Malheureusement, je n'ai pas encore assez d'infos sur ce point sp√©cifique. Essayons d'aborder cela autrement - que cherchez-vous exactement √† faire ?",
            "Oh l√† l√†, je dois avouer que je ne suis pas s√ªr d'avoir bien saisi ! üòÖ Pouvez-vous reformuler votre question ? J'aimerais vraiment pouvoir vous aider !",
            "Excellente question ! Je sens que c'est important pour vous. M√™me si je n'ai pas la r√©ponse exacte, peut-√™tre que je peux vous orienter autrement. Dites-moi en plus sur votre situation ?",
            "Je dois √™tre honn√™te avec vous - cette question me d√©passe un peu ! üòä Mais ne vous d√©couragez pas, on va trouver une solution ensemble. Pouvez-vous me dire ce qui vous am√®ne √† poser cette question ?",
        ]
        
        self.conversation_starters = [
            "Au fait, pendant que j'y pense",
            "D'ailleurs",
            "√Ä propos",
            "Cela me fait penser √†",
            "Tiens, √ßa me rappelle que",
        ]
        
        self.empathy_expressions = {
            'frustration': [
                "Je comprends que ce soit frustrant",
                "C'est vrai que √ßa peut √™tre aga√ßant",
                "Je vois que vous √™tes un peu emb√™t√©",
            ],
            'confusion': [
                "Pas de souci, c'est normal d'√™tre un peu perdu",
                "Ne vous inqui√©tez pas, on va d√©m√™ler √ßa ensemble",
                "C'est tout √† fait compr√©hensible d'avoir des questions",
            ],            'urgency': [
                "Je vois que c'est urgent pour vous",
                "Je comprends que vous ayez besoin d'une r√©ponse rapide",
                "C'est important, je vais faire de mon mieux",
            ]
        }
    
    def generate_response(self, user_message: str, conversation_history: list = None, detected_emotion: str = None) -> str:
        """
        G√©n√®re une r√©ponse IA naturelle et empathique
        
        Args:
            user_message: Message de l'utilisateur
            conversation_history: Historique de la conversation
            detected_emotion: √âmotion d√©tect√©e
            
        Returns:
            str: R√©ponse g√©n√©r√©e
        """
        user_message_lower = user_message.lower()
        
        # R√©ponses contextuelles et naturelles
        if any(greeting in user_message_lower for greeting in ['bonjour', 'salut', 'hello', 'hey', 'coucou']):
            greetings = [
                "Salut ! üòä Super de vous voir ! Comment √ßa va aujourd'hui ?",
                "Hello ! Ravi de vous retrouver ! Qu'est-ce qui vous am√®ne ?",
                "Bonjour ! J'esp√®re que vous passez une belle journ√©e ! Comment puis-je vous aider ?",
                "Hey ! Content de vous voir par ici ! Dites-moi tout, qu'est-ce que je peux faire pour vous ?",
                "Coucou ! üëã √áa fait plaisir ! Alors, qu'est-ce qui vous pr√©occupe aujourd'hui ?"
            ]
            return self._random_choice(greetings)
        
        if any(thanks in user_message_lower for thanks in ['merci', 'thank', 'remercie', 'super', 'g√©nial']):
            thanks_responses = [
                "Mais de rien, √ßa me fait plaisir ! üòä C'est pour √ßa que je suis l√† !",
                "Avec grand plaisir ! N'h√©sitez surtout pas si vous avez d'autres questions !",
                "Oh, c'est gentil ! J'adore pouvoir vous aider ! Autre chose ?",
                "Tout le plaisir est pour moi ! ü§ó Y a-t-il autre chose que je puisse faire ?",
                "√áa me fait chaud au c≈ìur ! N'h√©sitez pas √† revenir quand vous voulez !"
            ]
            return self._random_choice(thanks_responses)
        
        if any(goodbye in user_message_lower for goodbye in ['au revoir', 'bye', '√† bient√¥t', 'salut', 'tchao']):
            goodbye_responses = [
                "Au revoir ! üëã C'√©tait un vrai plaisir de discuter avec vous ! √Ä tr√®s bient√¥t !",
                "Bye bye ! J'esp√®re qu'on se reparlera bient√¥t ! Passez une excellente journ√©e ! ‚òÄÔ∏è",
                "√Ä bient√¥t ! N'h√©sitez surtout pas √† revenir me voir ! üòä",
                "Salut ! Prenez soin de vous et √† la prochaine ! ü§ó",
                "Tchao ! C'√©tait super sympa ! Revenez me voir quand vous voulez !"
            ]
            return self._random_choice(goodbye_responses)
        
        # R√©ponses selon l'√©motion d√©tect√©e
        if detected_emotion:
            emotion_response = self._get_empathetic_response(detected_emotion, user_message_lower)
            if emotion_response:
                return emotion_response
        
        # R√©ponses contextuelles sp√©cifiques
        if any(word in user_message_lower for word in ['aide', 'aider', 'help', 'assistance']):
            help_responses = [
                "Bien s√ªr que je peux vous aider ! üòä C'est exactement pour √ßa que je suis l√† ! Dites-moi ce qui vous pr√©occupe !",
                "Avec plaisir ! J'adore pouvoir rendre service ! Alors, qu'est-ce qui vous tracasse ?",
                "Absolument ! Je suis tout ou√Øe ! üëÇ Expliquez-moi votre situation, on va trouver une solution ensemble !",
                "√âvidemment ! C'est ma mission pr√©f√©r√©e ! Racontez-moi tout, qu'est-ce que je peux faire pour vous ?",
            ]
            return self._random_choice(help_responses)
        
        if any(word in user_message_lower for word in ['probl√®me', 'souci', 'bug', 'erreur', 'marche pas']):
            problem_responses = [
                "Oh l√† l√†, un petit souci ? üòî Pas de panique, on va r√©gler √ßa ensemble ! Dites-moi exactement ce qui se passe !",
                "A√Øe, un probl√®me ! Ne vous inqui√©tez pas, je vais faire de mon mieux pour vous aider ! Pouvez-vous me d√©crire la situation ?",
                "Zut alors ! Un bug qui vous emb√™te ? ü§î Racontez-moi tout en d√©tail, qu'on puisse voir ce qui cloche !",
                "Oh non, quelque chose ne marche pas comme il faut ? D√©crivez-moi le probl√®me, on va trouver la solution !",
            ]
            return self._random_choice(problem_responses)
        
        # R√©ponse par d√©faut al√©atoire et naturelle
        return self._get_natural_fallback_response(user_message_lower)
    
    def _get_empathetic_response(self, emotion: str, message: str) -> str:
        """G√©n√®re une r√©ponse empathique selon l'√©motion"""
        if emotion == 'angry' or emotion == 'negative':
            return "Je sens que vous √™tes un peu frustr√©... üòî C'est tout √† fait compr√©hensible ! Prenons le temps de voir comment je peux vous aider. Qu'est-ce qui vous pr√©occupe le plus ?"
        
        elif emotion == 'sad':
            return "Je vois que quelque chose vous tracasse... üíô Je suis l√† pour vous √©couter et vous aider du mieux que je peux. Voulez-vous me parler de ce qui vous pr√©occupe ?"
        
        elif emotion == 'fear':
            return "Je sens un peu d'inqui√©tude dans votre message... Ne vous en faites pas, on va prendre les choses une par une ! ü§ó Dites-moi ce qui vous fait peur, on va voir √ßa ensemble !"
        
        elif emotion == 'joy' or emotion == 'positive':
            return "J'adore votre enthousiasme ! üòÑ √áa fait plaisir ! Alors, comment puis-je contribuer √† cette bonne humeur ? Qu'est-ce que je peux faire pour vous ?"
        
        return None
    
    def _get_natural_fallback_response(self, message: str) -> str:
        """G√©n√®re une r√©ponse de fallback naturelle"""
        import random
        
        # Analyser le message pour une r√©ponse plus contextuelle
        if '?' in message:
            question_responses = [
                "Excellente question ! ü§î M√™me si je n'ai pas la r√©ponse exacte sous la main, dites-moi en plus sur ce que vous cherchez ? Peut-√™tre que je peux vous orienter !",
                "Ah, une question int√©ressante ! Je dois avouer que je ne suis pas s√ªr d'avoir toutes les infos n√©cessaires... Pouvez-vous me donner un peu plus de contexte ?",
                "Oh, bonne question ! üòä Je sens que c'est important pour vous. M√™me si je n'ai pas la r√©ponse pr√©cise, on peut s√ªrement trouver une solution ensemble. Expliquez-moi votre situation !",
            ]
            return random.choice(question_responses)
        
        # R√©ponses g√©n√©rales naturelles
        return random.choice(self.fallback_responses)
    
    def _random_choice(self, options):
        """S√©lection al√©atoire avec un peu de variabilit√©"""
        import random
        return random.choice(options)


class ChatbotService:
    """
    Service principal du chatbot
    """
    
    def __init__(self):
        self.emotion_detector = EmotionDetector()
        self.knowledge_matcher = KnowledgeBaseMatcher()
        self.ai_generator = AIResponseGenerator()
    
    def process_message(self, user_message: str, session_id: str = None, user_id: int = None) -> Dict[str, Any]:
        """
        Traite un message utilisateur et g√©n√®re une r√©ponse
        
        Args:
            user_message: Message de l'utilisateur
            session_id: ID de session (optionnel)
            user_id: ID utilisateur (optionnel)
            
        Returns:
            Dict: R√©ponse compl√®te avec m√©tadonn√©es
        """
        start_time = time.time()
        
        # G√©n√©ration d'un session_id si non fourni
        if not session_id:
            session_id = str(uuid.uuid4())
        
        # R√©cup√©ration ou cr√©ation de la conversation
        conversation = self._get_or_create_conversation(session_id, user_id)
        
        # D√©tection de la langue
        try:
            detected_language = detect(user_message)
        except:
            detected_language = 'fr'  # Fran√ßais par d√©faut
        
        # D√©tection d'√©motion
        emotion, emotion_confidence = self.emotion_detector.detect_emotion(user_message)
        
        # Sauvegarde du message utilisateur
        user_message_obj = Message.objects.create(
            conversation=conversation,
            sender='user',
            content=user_message,
            detected_emotion=emotion,
            emotion_confidence=emotion_confidence,
            detected_language=detected_language
        )
        
        # G√©n√©ration de la r√©ponse
        response_text, response_method, knowledge_used = self._generate_response(
            user_message, conversation
        )
        
        # Calcul du temps de traitement
        processing_time = time.time() - start_time
        
        # Sauvegarde de la r√©ponse du bot
        bot_message = Message.objects.create(
            conversation=conversation,
            sender='bot',
            content=response_text,
            knowledge_base_used=knowledge_used,
            response_method=response_method,
            processing_time=processing_time
        )
        
        return {
            'message': response_text,
            'session_id': session_id,
            'conversation_id': conversation.id,
            'detected_emotion': emotion,
            'emotion_confidence': emotion_confidence,
            'response_method': response_method,
            'processing_time': processing_time
        }
    
    def _get_or_create_conversation(self, session_id: str, user_id: int = None) -> Conversation:
        """
        R√©cup√®re ou cr√©e une conversation
        """
        conversation_filter = Q(session_id=session_id, is_active=True)
        if user_id:
            conversation_filter &= Q(user_id=user_id)
        
        conversation = Conversation.objects.filter(conversation_filter).first()
        
        if not conversation:
            conversation = Conversation.objects.create(
                session_id=session_id,
                user_id=user_id if user_id else None
            )
        
        return conversation
    
    def _generate_response(self, user_message: str, conversation: Conversation) -> Tuple[str, str, Optional[KnowledgeBase]]:
        """
        G√©n√®re une r√©ponse en utilisant la strat√©gie en couches
        
        Returns:
            Tuple[str, str, KnowledgeBase]: (r√©ponse, m√©thode, base_connaissance_utilis√©e)
        """
        # 1. Recherche dans la base de connaissances
        knowledge_match, confidence = self.knowledge_matcher.find_best_match(user_message)
        
        if knowledge_match and confidence > knowledge_match.confidence_threshold:
            return knowledge_match.answer, 'knowledge_base', knowledge_match
          # 2. G√©n√©ration IA
        settings_obj = ChatbotSettings.objects.first()
        if not settings_obj or settings_obj.enable_ai_generation:
            # R√©cup√©rer l'historique r√©cent
            recent_messages = conversation.messages.order_by('-timestamp')[:10]
            conversation_history = [msg.content for msg in recent_messages]
            
            # Passer l'√©motion d√©tect√©e si disponible
            user_emotion = None
            last_user_message = conversation.messages.filter(sender='user').order_by('-timestamp').first()
            if last_user_message:
                user_emotion = last_user_message.detected_emotion
            
            ai_response = self.ai_generator.generate_response(user_message, conversation_history, user_emotion)
            return ai_response, 'ai_generation', None
        
        # 3. R√©ponse par d√©faut
        default_response = "Je ne suis pas s√ªr de comprendre votre question. Pouvez-vous la reformuler ?"
        if settings_obj:
            default_response = settings_obj.default_response
        
        return default_response, 'fallback', None
